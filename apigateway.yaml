openapi: 3.0.1
info:
  title: Network API Gateway Spec
  description: Schema for objects passed between API Gateway, its SDKs, and client code
  termsOfService: http://swagger.io/terms/
  contact:
    email: landon.cox@microsoft.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.2.0
externalDocs:
  description: Project git repo
  url: https://github.com/lpcox/gateway-control-plane
paths:
  /getnetworks:
    get:
      description: 'Returns all networks that the API Gateway can access'
      responses:
        '200':
          description: 'A list of network paths.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkList'
  /sessionstart:
    post:
      description: 'Create a new API Gateway session. Returns a session token that can be used in subsequent requests under the session.'
      requestBody:
        description: 'A credentials blob, secret string, and ttl.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionStart'
        required: true
      responses:
          201:
            description: 'Session created'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SessionToken'
  /sessionexpire:
    put:
      description: 'Update a session ttl.'
      requestBody:
        description: 'Session token and the new ttl, which could be zero.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionExpire'
      responses:
        201:
          description: 'Session TTL successfully updated.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionToken'
  /getues:
    put:
      description: 'Returns all UEs accessible under the session credentials.'
      requestBody:
        description: 'A valid session token'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionToken'
      responses:
        201:
          description: 'UEs accessible under the session credentials.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectList'
  /getedges:
    put:
      description: 'Returns all MECs accessible under the session credentials.'
      requestBody:
        description: 'A valid session token'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionToken'
      responses:
        201:
          description: 'MECs accessible under the session credentials.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectList'
  /getproperties:
    put:
      description: 'Returns properties an edge/UE or an edge/UE pair.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetProperties'
      responses:
        201:
          description: 'Properties an edge/UE or an edge/UE pair.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Properties'
  /pubsubstart:
    put:
      description: 'Returns a pubsub channel for monitoring network properties.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PubSubStart'
      responses:
        201:
          description: 'A pubsub channel for monitoring network propertiesr.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PubSubChannel'
components:
  schemas:
    NetworkPath:
      type: string
      pattern: '^\/net\/[a-z0-9-]+$'
      description: Path representing a network
      example: '/net/att'
    EdgePath: 
      type: string
      pattern: '^\/net\/[a-z0-9-]+\/edge\/[a-zA-Z0-9-]+$'
      description: Path representing an edge server (MEC) under a particular network
      example: '/net/att/edge/ANEAtlanta'
    UEPath:
      type: string
      pattern: '^\/net\/[a-z0-9-]+\/ue\/((imei\/[0-9]{15})|(imsi\/[0-9]{14,15})|(tn\/\+[1-9]{1}[0-9]{1,14})|(ipv4\/([01]?\d\d?|2[0-4]\d|25[0-5])(?:\.(?:[01]?\d\d?|2[0-4]\d|25[0-5])){3}(\/([0-9]|[1-2][0-9]|3[0-2]))?(\:[0-9]{1,5})?)|(ipv6\/(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4})(\:[0-9]{1,5})?){1}$'
      description: Path representing UE under a particular work by imei number, imsi number, international telephone number, ipv4 address, or ipv6 address.
      example: '/net/att/ue/ipv4/174.204.72.203'
    NetworkList:
      type: object
      properties:
        networks:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/NetworkPath'  
    ObjectList:
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/NetworkObjects'    
    NetworkObjects:
      type: object
      required:
        - network
        - objects
      properties:
        network:
          $ref: '#/components/schemas/NetworkPath'
        objects:
          type: array
          items:
            type: string
    NetworkCredentials:
      type: object
      description: 'All credentials for a particular network.'
      properties:
        network:
          $ref: '#/components/schemas/NetworkPath'
        credentials:
          type: object
          example: { 'Authorization' : 'Bearer eyJ0eXAiOiJKV1QiL' }
    CredentialsList:
      description: 'All credentials for a set of networks.'
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/NetworkCredentials'
    SessionStart:
      type: object
      properties:
        credentials:
          $ref: '#/components/schemas/CredentialsList'
        secret:
          type: string
          format: base64
          example: 'gmnq/OYn5xAM6HptJ6UX6Q=='
        ttl:
          type: integer
          minimum: 1
          example: 300
    SessionToken:
      type: object
      properties:
        token:
          type: string
          format: base64
          example: 'zo0ovQPu/fE6UKvEfs06OTLRSynFcac4dhf+CPRabMc='
    SessionExpire:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/SessionToken'
        ttl:
          type: integer
          minimum: 0
    Location:
      type: object
      properties:
        lat: 
          type: number
          format: double
        lon:
          type: number
          format: double
        region:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
    ComputeProperties:
      type: object
      properties:
        numNodes:
          type: integer
        nodeCPUs:
          type: integer
        nodeGPUs:
          type: integer
        nodeMemoryGB:
          type: integer
    NetworkProperties:
      type: object
      properties:
        minUpBandwidthKbps:
          type: number
          format: double
        minDnBandwidthKbps:
          type: number
          format: double
        maxLatencyMs:
          type: integer
        maxJitterKbps:
          type: number
          format: double
        maxJitterMs:
          type: integer
        avgLatencyMs:
          type: integer
        avgUpBandwidthKbps:
          type: number
          format: double
        avgDnBandwidthKbps:
          type: number
          format: double
        rsrp:
          type: number
          format: double
        rsrq:
          type: number
          format: double
        cellCongestion:
          type: integer
    GetProperties:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/SessionToken'
        ueName:
          $ref: '#/components/schemas/UEPath'
        edgeName:
          $ref: '#/components/schemas/EdgePath'    
    Properties:
      type: object
      properties:
        ueName:
          $ref: '#/components/schemas/UEPath'
        edgeName:
          $ref: '#/components/schemas/EdgePath'
        ueLocation:
          $ref: '#/components/schemas/Location'
        edgeLocation:
          $ref: '#/components/schemas/Location'
        networkProperties:
          $ref: '#/components/schemas/NetworkProperties'
        computeProperties:
          $ref: '#/components/schemas/ComputeProperties'
    PubSubStart:
      type: object
      properties:
        getproperties:
          $ref: '#/components/schemas/GetProperties'
        period:
          type: integer
        filter:
          type: array
          items:
            type: string
          example: '["networkProperties", "avgLatencyMs"]'
    PubSubChannel:
      type: object
      properties:
        channel:
          type: string
          example: 'e22fceb1d3af05ce'